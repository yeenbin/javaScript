/**
 * Created by enbinye on 2017/6/15.
 */
'use strict'
//正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

/*
* 在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

 '00\d'可以匹配'007'，但无法匹配'00A'；

 '\d\d\d'可以匹配'010'；

 '\w\w'可以匹配'js'；

 .可以匹配任意字符，所以：

 'js.'可以匹配'jsp'、'jss'、'js!'等等。
 要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

 来看一个复杂的例子：\d{3}\s+\d{3,8}。

 我们来从左到右解读一下：

 \d{3}表示匹配3个数字，例如'010'；

 \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，'\t\t'等；

 \d{3,8}表示3-8个数字，例如'1234567'。

 综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。

 如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。

 但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。
 */

//******************************进阶

/*

 要做更精确地匹配，可以用[]表示范围，比如：

 [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；

 [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'js2015'等等；

 [a-zA-Z\_\$][0-9a-zA-Z\_\$]*可以匹配由字母或下划线、$开头，后接任意个由一个数字、字母或者下划线、$组成的字符串，也就是JavaScript允许的变量名；

 [a-zA-Z\_\$][0-9a-zA-Z\_\$]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

 A|B可以匹配A或B，所以(J|j)ava(S|s)cript可以匹配'JavaScript'、'Javascript'、'javaScript'或者'javascript'。

 ^表示行的开头，^\d表示必须以数字开头。

 $表示行的结束，\d$表示必须以数字结束。

 你可能注意到了，js也可以匹配'jsp'，但是加上^js$就变成了整行匹配，就只能匹配'js'了。

 */

//创建RegExp的两种写法
//第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp('正则表达式')创建一个RegExp对象。
var re1 = /ABC\-001/;
var re2 = new RegExp('ABC\\-001');
console.log(re1.test('ABC-001'));//true
console.log(re2.test('ABC-001'));//true

console.log(re1.test('ABC001'));//false
console.log(re2.test('ABC001'));//false

//RegExp对象的test()方法用于测试给定的字符串是否符合条件。


//**********利用正则表达式来切分字符串
console.log('a b   c'.split(' ')); // ['a', 'b', '', '', 'c']
console.log('a b   c'.split(/\s+/)); // ['a', 'b', 'c']
//加入逗号
console.log('a,b, c  d'.split(/[\s\,]+/)); // ['a', 'b', 'c', 'd']
//加入分号
console.log('a,b;; c  d'.split(/[\s\,\;]+/)); // ['a', 'b', 'c', 'd']

//正则表达式除了简单判断是否匹配之外,正则表达式还有提取子串的强大功能 用()表示要提取的分组

var re = /^(\d{3})-(\d{3,8})$/;
console.log(re.exec('010-12345'));//["010-12345", "010", "12345", index: 0, input: "010-12345"]
console.log(re.exec('010 12345'));//null

//************贪婪匹配

// 需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：

var re = /^(\d+)(0*)$/;
re.exec('102300'); // ['102300', '102300', '']
// 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

// 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

var re = /^(\d+?)(0*)$/;
re.exec('102300'); // ['102300', '1023', '00']

